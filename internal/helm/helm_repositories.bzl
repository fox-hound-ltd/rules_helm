"""Install Helm"""

load("//internal/common:os_name.bzl", "OS_ARCH_NAMES", "os_name", "is_windows_os")
load("//internal/helm:helm_versions.bzl", "HELM_VERSIONS")
load("//toolchains/helm:helm_toolchain_configure.bzl", "helm_toolchain_configure")

BUILT_IN_PLATFORMS = [
    "darwin_amd64",
    "linux_amd64",
    "linux_arm64",
    "windows_amd64",
    "linux_s390x",
]

def _download_helm(repository_ctx):
    """Used to download a Helm runtime package.

    Args:
      repository_ctx: The repository rule context
    """

    # The host is baked into the repository name by design.
    # Current these workspaces are:
    # @helm_PLATFORM where PLATFORM is one of BUILT_IN_PLATFORMS
    host_os = repository_ctx.name.split("helm_", 1)[1]

    version = repository_ctx.attr.version
    repositories = HELM_VERSIONS

    # Download node & npm
    version_host_os = "%s-%s" % (version, host_os)
    if not version_host_os in repositories:
        fail("Unknown Helm version-host %s" % version_host_os)
    filename, strip_prefix, sha256 = repositories[version_host_os]

    repository_ctx.download_and_extract(
        url = ["https://get.helm.sh/{filename}".format(filename = filename)],
        stripPrefix = strip_prefix,
        sha256 = sha256,
    )

    repository_ctx.file("helm_info", content = """# filename: {filename}
# strip_prefix: {strip_prefix}
# sha256: {sha256}
""".format(
        filename = filename,
        strip_prefix = strip_prefix,
        sha256 = sha256,
    ))

    # TODO: Maybe we want to encode the OS as a specific attribute rather than do it based on naming?
    is_windows = "_windows_" in repository_ctx.attr.name
    helm_bin = "helm" if not is_windows else "helm.exe"
    helm_bin_label = "helm" if not is_windows else "helm.exe"

    repository_ctx.file("BUILD.bazel", content = """# Generated by helm_repositories.bzl
package(default_visibility = ["//visibility:public"])
exports_files([
    "{helm_bin}",
  ])
alias(name = "helm_bin", actual = "{helm_bin}")
""".format(
        helm_bin = helm_bin
    ))

def _helm_repo_impl(repository_ctx):
    _download_helm(repository_ctx)

# Users should call the `node_repositories` wrapper macro.
# This is exposed for stardoc.
helm_repositories_rule = repository_rule(
    _helm_repo_impl,
    attrs = {
        "version": attr.string(
            default = "3.4.0",
            doc = "The specific version of Helm to install",
        ),
    },
)

def _helm_host_os_impl(repository_ctx):
    helm_bin = "helm" if not is_windows_os(repository_ctx) else "helm.exe"

    # Base BUILD file for this repository
    repository_ctx.file("BUILD.bazel", content = """# Generated by helm_repositories.bzl
package(default_visibility = ["//visibility:public"])
exports_files(["{helm_bin}"])
""".format(helm_bin = helm_bin))

    repository_ctx.symlink(Label("@helm_%s//:%s" % (os_name(repository_ctx), helm_bin)), helm_bin)

_helm_repo_host_os = repository_rule(_helm_host_os_impl)

def helm_repositories(**kwargs):
    """
    Wrapper macro around helm_repositories_rule to call it for each platform.

    Also register bazel toolchains, and make other convenience repositories.

    Note, the documentation is generated from the helm_repositories_rule, not this macro.
    Args:
          **kwargs: argument description, can be
            multiline with additional indentation.
    """

    # This needs to be setup so toolchains can access helm for all different versions
    for os_arch_name in OS_ARCH_NAMES:
        os_name = "_".join(os_arch_name)
        helm_repository_name = "helm_%s" % os_name
        _maybe(
            helm_repositories_rule,
            name = helm_repository_name,
            **kwargs
        )
        native.register_toolchains("@ltd_fox_hound_rules_helm//toolchains/helm:helm_%s_toolchain" % os_name)
        helm_toolchain_configure(
            name = "%s_config" % helm_repository_name,
            target_tool = "@%s//:helm_bin" % helm_repository_name,
        )

    # This "helm" repo is just for convinience so one does not have to target @helm_<os_name>//...
    # All it does is create aliases to the @helm_<host_os>_<host_arch> repository
    _maybe(
        _helm_repo_host_os,
        name = "helm",
    )

def _maybe(repo_rule, name, **kwargs):
    if name not in native.existing_rules():
        repo_rule(name = name, **kwargs)
