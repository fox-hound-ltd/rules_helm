"""
"""
def _helm_chart_impl(ctx):
    # Make sure the local repository config starts clean.
    ctx.delete("repositories.yaml")
    ctx.delete("repositories.lock")

    # Run 'helm repo add' to add the helm repository to the repository config.
    reponame = ctx.attr.name
    result = ctx.execute([
        ctx.path(Label("@helm//:helm")),
        "repo",
        "add",
        reponame,
        ctx.attr.repo_url,
        "--repository-config=repositories.yaml",
    ])
    if result.return_code != 0:
        fail("Failed to add Helm repository '%s': %s" % (reponame, result.stderr))

    # Run 'helm pull' to fetch the helm chart.
    result = ctx.execute([
        ctx.path(Label("@helm//:helm")),
        "pull",
        reponame + "/" + ctx.attr.chartname,
        "--version",
        ctx.attr.version,
        "--repository-config=repositories.yaml",
    ], timeout = 600)
    if result.return_code != 0:
        fail("Failed to pull Helm chart '%s': %s" % (ctx.attr.chartname, result.stderr))

    # Delete repository config.
    ctx.delete("repositories.yaml")
    ctx.delete("repositories.lock")

    # Label the downloaded chart to 'chart'.
    chart_file = "%s-%s.tgz" % (ctx.attr.chartname, ctx.attr.version)
    ctx.file("BUILD.bazel", content = """# Generated by helm.bzl
package(default_visibility = ["//visibility:public"])
exports_files([
    "{chart_file}",
  ])
alias(name = "chart", actual = "{chart_file}")
""".format(
        chart_file = chart_file,
    ))

helm_chart = repository_rule(
    implementation = _helm_chart_impl,
    attrs = {
        "repo_url": attr.string(mandatory = True),
        "chartname": attr.string(mandatory = True),
        "version": attr.string(mandatory = True),
    },
)
